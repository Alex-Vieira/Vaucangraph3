package vaucangraph.view;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import jgraph.view.Canvas;
import utils.file.FileUtils;
import vaucangraph.components.filechooser.JVFileChooser;
import vaucangraph.components.inspector.JVInspector;
import vaucangraph.components.statusbar.JVStatusBar;
import vaucangraph.model.Project;
import vaucangraph.model.Style;

/**
 * <b>Vaucangraph 2</b> - A evolução de uma ferramenta para desenho de autômatos
 * e grafos com geração de códigos Vaucanson-G <br><br>
 *
 * Desenvolvida por: <br><br>
 * Kleber Kruger <br>
 * José Ademar Peixoto de Souza <br>
 *
 * @version 2.0
 * @since 2010-05-15
 *
 * @author Kleber Kruger
 * @author José Ademar Peixoto de Souza
 */
public class Vaucangraph extends javax.swing.JFrame {

    /**
     * Estilo da janela
     */
    protected final Style style;
    /**
     * Componentes
     */
    private ArrayList<ProjectPanel> projects;
    private JVStatusBar jsbStatus;

    /** Creates new form Vaucangraph */
    public Vaucangraph(Style style) {
        this.style = style;
        this.projects = new ArrayList<ProjectPanel>();

        // Método padrão que adiciona os componentes ao frame
        initComponents();
        // Adiciona a barra de status
        addStatusBar(new JVStatusBar(null));
        // Adiciona eventos na janela
        addWindowListener();
        // Configura o frame
        configure(this.style);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gridTypeGroup = new javax.swing.ButtonGroup();
        jpBackground = new javax.swing.JPanel();
        jtbMenu = new javax.swing.JToolBar();
        jbNewProject = new javax.swing.JButton();
        jbOpen = new javax.swing.JButton();
        jbSave = new javax.swing.JButton();
        jsSeparator9 = new javax.swing.JToolBar.Separator();
        jbUndo = new javax.swing.JButton();
        jbRedo = new javax.swing.JButton();
        jsSeparator10 = new javax.swing.JToolBar.Separator();
        jbZoomOut = new javax.swing.JButton();
        jbZoomIn = new javax.swing.JButton();
        jpProject = new javax.swing.JPanel();
        jtpProjects = new javax.swing.JTabbedPane();
        jpHomepage = new javax.swing.JPanel();
        jpComponents = new javax.swing.JPanel();
        jspInspector = new javax.swing.JScrollPane();
        jtInspector = new javax.swing.JTree();
        jspProperties = new javax.swing.JScrollPane();
        jtProperties = new javax.swing.JTable();
        jpStatus = new javax.swing.JPanel();
        jmbMenu = new javax.swing.JMenuBar();
        jmFile = new javax.swing.JMenu();
        jmiNewProject = new javax.swing.JMenuItem();
        jsSeparator1 = new javax.swing.JPopupMenu.Separator();
        jmiOpen = new javax.swing.JMenuItem();
        jmiClose = new javax.swing.JMenuItem();
        jsSeparator2 = new javax.swing.JPopupMenu.Separator();
        jmExport = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jmiExportPNG = new javax.swing.JMenuItem();
        jsSeparator11 = new javax.swing.JPopupMenu.Separator();
        jmiExportJPG = new javax.swing.JMenuItem();
        jsSeparator3 = new javax.swing.JPopupMenu.Separator();
        jmiSave = new javax.swing.JMenuItem();
        jmiSaveAs = new javax.swing.JMenuItem();
        jmiSaveAll = new javax.swing.JMenuItem();
        jsSeparator4 = new javax.swing.JPopupMenu.Separator();
        jmiExit = new javax.swing.JMenuItem();
        jmEdit = new javax.swing.JMenu();
        jmiUndo = new javax.swing.JMenuItem();
        jmiRedo = new javax.swing.JMenuItem();
        jsSeparator5 = new javax.swing.JPopupMenu.Separator();
        jmiCut = new javax.swing.JMenuItem();
        jmiCopy = new javax.swing.JMenuItem();
        jmiPaste = new javax.swing.JMenuItem();
        jmiDelete = new javax.swing.JMenuItem();
        jsSeparator6 = new javax.swing.JPopupMenu.Separator();
        jmiFindCell = new javax.swing.JMenuItem();
        jmView = new javax.swing.JMenu();
        jcbmiGridVisible = new javax.swing.JCheckBoxMenuItem();
        jcbmiGridEnable = new javax.swing.JCheckBoxMenuItem();
        jsSeparator7 = new javax.swing.JPopupMenu.Separator();
        jmGridModel = new javax.swing.JMenu();
        jrbmiLines = new javax.swing.JRadioButtonMenuItem();
        jrbmiPoints = new javax.swing.JRadioButtonMenuItem();
        jmiGridSize = new javax.swing.JMenuItem();
        jmHelp = new javax.swing.JMenu();
        jmiHelp = new javax.swing.JMenuItem();
        jsSeparator8 = new javax.swing.JPopupMenu.Separator();
        jmiAbout = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Vaucangraph 2.0");

        jtbMenu.setFloatable(false);
        jtbMenu.setRollover(true);

        jbNewProject.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vaucangraph/icons/newproject.png"))); // NOI18N
        jbNewProject.setToolTipText("<html>\n<b>Novo projeto... (Ctrl + N)</b><br>\nCria um novo projeto\n</html>");
        jbNewProject.setFocusable(false);
        jbNewProject.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbNewProject.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbNewProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNewProjectActionPerformed(evt);
            }
        });
        jtbMenu.add(jbNewProject);

        jbOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vaucangraph/icons/open.png"))); // NOI18N
        jbOpen.setToolTipText("<html>\n<b>Abrir projeto... (Ctrl + O)</b><br>\nAbre um projeto salvo no disco\n</html>");
        jbOpen.setFocusable(false);
        jbOpen.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbOpen.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbOpenActionPerformed(evt);
            }
        });
        jtbMenu.add(jbOpen);

        jbSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vaucangraph/icons/save.png"))); // NOI18N
        jbSave.setToolTipText("<html>\n<b>Salvar... (Ctrl + S)</b><br>\nSalva o projeto atual\n</html>");
        jbSave.setEnabled(false);
        jbSave.setFocusable(false);
        jbSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSaveActionPerformed(evt);
            }
        });
        jtbMenu.add(jbSave);
        jtbMenu.add(jsSeparator9);

        jbUndo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vaucangraph/icons/undo.png"))); // NOI18N
        jbUndo.setToolTipText("<html>\n<b>Desfazer... (Ctrl + Z)</b><br>\nRetorna ao estado anterior\n</html>");
        jbUndo.setEnabled(false);
        jbUndo.setFocusable(false);
        jbUndo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbUndoActionPerformed(evt);
            }
        });
        jtbMenu.add(jbUndo);

        jbRedo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vaucangraph/icons/redo.png"))); // NOI18N
        jbRedo.setToolTipText("<html>\n<b>Refazer... (Ctrl + Y)</b><br>\nRetorna ao estado posterior\n</html>");
        jbRedo.setEnabled(false);
        jbRedo.setFocusable(false);
        jbRedo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbRedo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRedoActionPerformed(evt);
            }
        });
        jtbMenu.add(jbRedo);
        jtbMenu.add(jsSeparator10);

        jbZoomOut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vaucangraph/icons/zoomout.png"))); // NOI18N
        jbZoomOut.setToolTipText("<html>\n<b>- Zoom...</b><br>\nDiminui o zoom\n</html>");
        jbZoomOut.setFocusable(false);
        jbZoomOut.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbZoomOut.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbZoomOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbZoomOutActionPerformed(evt);
            }
        });
        jtbMenu.add(jbZoomOut);

        jbZoomIn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vaucangraph/icons/zoomin.png"))); // NOI18N
        jbZoomIn.setToolTipText("<html>\n<b>+ Zoom...</b><br>\nAumenta o zoom\n</html>");
        jbZoomIn.setFocusable(false);
        jbZoomIn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbZoomIn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbZoomIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbZoomInActionPerformed(evt);
            }
        });
        jtbMenu.add(jbZoomIn);

        jtpProjects.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jtpProjectsStateChanged(evt);
            }
        });

        jpHomepage.setBackground(java.awt.Color.gray);

        javax.swing.GroupLayout jpHomepageLayout = new javax.swing.GroupLayout(jpHomepage);
        jpHomepage.setLayout(jpHomepageLayout);
        jpHomepageLayout.setHorizontalGroup(
            jpHomepageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 402, Short.MAX_VALUE)
        );
        jpHomepageLayout.setVerticalGroup(
            jpHomepageLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 324, Short.MAX_VALUE)
        );

        jtpProjects.addTab("Página inicial", jpHomepage);

        javax.swing.GroupLayout jpProjectLayout = new javax.swing.GroupLayout(jpProject);
        jpProject.setLayout(jpProjectLayout);
        jpProjectLayout.setHorizontalGroup(
            jpProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jtpProjects, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE)
        );
        jpProjectLayout.setVerticalGroup(
            jpProjectLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jtpProjects, javax.swing.GroupLayout.DEFAULT_SIZE, 352, Short.MAX_VALUE)
        );

        jtInspector.setToolTipText("<html>\n<b>Inspetor de elementos</b><br>\nSelecione um componente através do inspetor\n</html>");
        jspInspector.setViewportView(jtInspector);

        jtProperties.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Propriedade", "Valor"
            }
        ));
        jtProperties.setToolTipText("<html>\n<b>Tabela de propriedades</b><br>\nAltere as propriedades da célula selecionada\n</html>");
        jtProperties.getTableHeader().setReorderingAllowed(false);
        jspProperties.setViewportView(jtProperties);

        javax.swing.GroupLayout jpComponentsLayout = new javax.swing.GroupLayout(jpComponents);
        jpComponents.setLayout(jpComponentsLayout);
        jpComponentsLayout.setHorizontalGroup(
            jpComponentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jspProperties, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
            .addComponent(jspInspector, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE)
        );
        jpComponentsLayout.setVerticalGroup(
            jpComponentsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpComponentsLayout.createSequentialGroup()
                .addComponent(jspInspector, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jspProperties, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jpStatusLayout = new javax.swing.GroupLayout(jpStatus);
        jpStatus.setLayout(jpStatusLayout);
        jpStatusLayout.setHorizontalGroup(
            jpStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 642, Short.MAX_VALUE)
        );
        jpStatusLayout.setVerticalGroup(
            jpStatusLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 27, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jpBackgroundLayout = new javax.swing.GroupLayout(jpBackground);
        jpBackground.setLayout(jpBackgroundLayout);
        jpBackgroundLayout.setHorizontalGroup(
            jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jtbMenu, javax.swing.GroupLayout.DEFAULT_SIZE, 642, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jpBackgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jpProject, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpComponents, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jpStatus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jpBackgroundLayout.setVerticalGroup(
            jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpBackgroundLayout.createSequentialGroup()
                .addComponent(jtbMenu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jpBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpProject, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpComponents, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jpStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jmFile.setText("Arquivo");

        jmiNewProject.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jmiNewProject.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vaucangraph/icons/menuitem-newproject.png"))); // NOI18N
        jmiNewProject.setText("Novo projeto");
        jmiNewProject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiNewProjectActionPerformed(evt);
            }
        });
        jmFile.add(jmiNewProject);
        jmFile.add(jsSeparator1);

        jmiOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jmiOpen.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vaucangraph/icons/menuitem-open.png"))); // NOI18N
        jmiOpen.setText("Abrir projeto");
        jmiOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiOpenActionPerformed(evt);
            }
        });
        jmFile.add(jmiOpen);

        jmiClose.setText("Fechar projeto");
        jmiClose.setEnabled(false);
        jmiClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiCloseActionPerformed(evt);
            }
        });
        jmFile.add(jmiClose);
        jmFile.add(jsSeparator2);

        jmExport.setText("Exportar");

        jMenuItem2.setText("Imagem JPG");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jmExport.add(jMenuItem2);

        jmiExportPNG.setText("Imagem PNG");
        jmiExportPNG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiExportPNGActionPerformed(evt);
            }
        });
        jmExport.add(jmiExportPNG);
        jmExport.add(jsSeparator11);

        jmiExportJPG.setText("Código Vaucanson G");
        jmiExportJPG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiExportJPGActionPerformed(evt);
            }
        });
        jmExport.add(jmiExportJPG);

        jmFile.add(jmExport);
        jmFile.add(jsSeparator3);

        jmiSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jmiSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vaucangraph/icons/menuitem-save.png"))); // NOI18N
        jmiSave.setText("Salvar");
        jmiSave.setEnabled(false);
        jmiSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSaveActionPerformed(evt);
            }
        });
        jmFile.add(jmiSave);

        jmiSaveAs.setText("Salvar como");
        jmiSaveAs.setEnabled(false);
        jmiSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSaveAsActionPerformed(evt);
            }
        });
        jmFile.add(jmiSaveAs);

        jmiSaveAll.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jmiSaveAll.setText("Salvar todos");
        jmiSaveAll.setEnabled(false);
        jmiSaveAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiSaveAllActionPerformed(evt);
            }
        });
        jmFile.add(jmiSaveAll);
        jmFile.add(jsSeparator4);

        jmiExit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F4, java.awt.event.InputEvent.ALT_MASK));
        jmiExit.setText("Sair");
        jmiExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiExitActionPerformed(evt);
            }
        });
        jmFile.add(jmiExit);

        jmbMenu.add(jmFile);

        jmEdit.setText("Editar");

        jmiUndo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        jmiUndo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vaucangraph/icons/menuitem-undo.png"))); // NOI18N
        jmiUndo.setText("Desfazer");
        jmiUndo.setEnabled(false);
        jmiUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiUndoActionPerformed(evt);
            }
        });
        jmEdit.add(jmiUndo);

        jmiRedo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.CTRL_MASK));
        jmiRedo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vaucangraph/icons/menuitem-redo.png"))); // NOI18N
        jmiRedo.setText("Refazer");
        jmiRedo.setEnabled(false);
        jmEdit.add(jmiRedo);
        jmEdit.add(jsSeparator5);

        jmiCut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        jmiCut.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vaucangraph/icons/menuitem-cut.png"))); // NOI18N
        jmiCut.setText("Recortar");
        jmiCut.setEnabled(false);
        jmiCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiCutActionPerformed(evt);
            }
        });
        jmEdit.add(jmiCut);

        jmiCopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jmiCopy.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vaucangraph/icons/menuitem-copy.png"))); // NOI18N
        jmiCopy.setText("Copiar");
        jmiCopy.setEnabled(false);
        jmiCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiCopyActionPerformed(evt);
            }
        });
        jmEdit.add(jmiCopy);

        jmiPaste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        jmiPaste.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vaucangraph/icons/menuitem-paste.png"))); // NOI18N
        jmiPaste.setText("Colar");
        jmiPaste.setEnabled(false);
        jmiPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiPasteActionPerformed(evt);
            }
        });
        jmEdit.add(jmiPaste);

        jmiDelete.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, 0));
        jmiDelete.setIcon(new javax.swing.ImageIcon(getClass().getResource("/vaucangraph/icons/menuitem-delete.png"))); // NOI18N
        jmiDelete.setText("Excluir");
        jmiDelete.setEnabled(false);
        jmiDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiDeleteActionPerformed(evt);
            }
        });
        jmEdit.add(jmiDelete);
        jmEdit.add(jsSeparator6);

        jmiFindCell.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        jmiFindCell.setText("Localizar célula");
        jmiFindCell.setEnabled(false);
        jmiFindCell.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiFindCellActionPerformed(evt);
            }
        });
        jmEdit.add(jmiFindCell);

        jmbMenu.add(jmEdit);

        jmView.setText("Exibir");

        jcbmiGridVisible.setText("Mostrar grade");
        jcbmiGridVisible.setEnabled(false);
        jcbmiGridVisible.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbmiGridVisibleItemStateChanged(evt);
            }
        });
        jmView.add(jcbmiGridVisible);

        jcbmiGridEnable.setText("Habilitar grade");
        jcbmiGridEnable.setEnabled(false);
        jcbmiGridEnable.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jcbmiGridEnableItemStateChanged(evt);
            }
        });
        jmView.add(jcbmiGridEnable);
        jmView.add(jsSeparator7);

        jmGridModel.setText("Modelo da grade");
        jmGridModel.setEnabled(false);

        gridTypeGroup.add(jrbmiLines);
        jrbmiLines.setSelected(true);
        jrbmiLines.setText("Linhas");
        jrbmiLines.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jrbmiLinesItemStateChanged(evt);
            }
        });
        jmGridModel.add(jrbmiLines);

        gridTypeGroup.add(jrbmiPoints);
        jrbmiPoints.setText("Pontos");
        jrbmiPoints.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jrbmiPointsItemStateChanged(evt);
            }
        });
        jmGridModel.add(jrbmiPoints);

        jmView.add(jmGridModel);

        jmiGridSize.setText("Tamanho da grade");
        jmiGridSize.setEnabled(false);
        jmiGridSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiGridSizeActionPerformed(evt);
            }
        });
        jmView.add(jmiGridSize);

        jmbMenu.add(jmView);

        jmHelp.setText("Ajuda");

        jmiHelp.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F1, 0));
        jmiHelp.setText("Conteúdo da ajuda");
        jmiHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiHelpActionPerformed(evt);
            }
        });
        jmHelp.add(jmiHelp);
        jmHelp.add(jsSeparator8);

        jmiAbout.setText("Sobre");
        jmiAbout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jmiAboutActionPerformed(evt);
            }
        });
        jmHelp.add(jmiAbout);

        jmbMenu.add(jmHelp);

        setJMenuBar(jmbMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jmiNewProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiNewProjectActionPerformed
        newProject();
    }//GEN-LAST:event_jmiNewProjectActionPerformed

    private void jmiOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiOpenActionPerformed
        open();
    }//GEN-LAST:event_jmiOpenActionPerformed

    private void jmiCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiCloseActionPerformed
        closeProject();
    }//GEN-LAST:event_jmiCloseActionPerformed

    private void jmiSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSaveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jmiSaveActionPerformed

    private void jmiSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSaveAsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jmiSaveAsActionPerformed

    private void jmiSaveAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiSaveAllActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jmiSaveAllActionPerformed

    private void jmiExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiExitActionPerformed
        exit();
    }//GEN-LAST:event_jmiExitActionPerformed

    private void jmiUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiUndoActionPerformed
        undo();
    }//GEN-LAST:event_jmiUndoActionPerformed

    private void jmiRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiRedoActionPerformed
        redo();
    }//GEN-LAST:event_jmiRedoActionPerformed

    private void jmiCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiCutActionPerformed
        cut(evt);
    }//GEN-LAST:event_jmiCutActionPerformed

    private void jmiCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiCopyActionPerformed
        copy(evt);
    }//GEN-LAST:event_jmiCopyActionPerformed

    private void jmiPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiPasteActionPerformed
        paste(evt);
    }//GEN-LAST:event_jmiPasteActionPerformed

    private void jmiDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiDeleteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jmiDeleteActionPerformed

    private void jmiFindCellActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiFindCellActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jmiFindCellActionPerformed

    private void jcbmiGridVisibleItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbmiGridVisibleItemStateChanged
        setGridVisible(jcbmiGridVisible.isSelected());
    }//GEN-LAST:event_jcbmiGridVisibleItemStateChanged

    private void jcbmiGridEnableItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jcbmiGridEnableItemStateChanged
        setGridEnable(jcbmiGridEnable.isSelected());
    }//GEN-LAST:event_jcbmiGridEnableItemStateChanged

    private void jrbmiLinesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jrbmiLinesItemStateChanged
        setGridModel();
    }//GEN-LAST:event_jrbmiLinesItemStateChanged

    private void jrbmiPointsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jrbmiPointsItemStateChanged
        setGridModel();
    }//GEN-LAST:event_jrbmiPointsItemStateChanged

    private void jmiGridSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiGridSizeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jmiGridSizeActionPerformed

    private void jmiHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiHelpActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jmiHelpActionPerformed

    private void jmiAboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiAboutActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jmiAboutActionPerformed

    private void jbNewProjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNewProjectActionPerformed
        newProject();
    }//GEN-LAST:event_jbNewProjectActionPerformed

    private void jbOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbOpenActionPerformed
        open();
    }//GEN-LAST:event_jbOpenActionPerformed

    private void jbSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSaveActionPerformed
        save();
    }//GEN-LAST:event_jbSaveActionPerformed

    private void jbUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbUndoActionPerformed
        undo();
    }//GEN-LAST:event_jbUndoActionPerformed

    private void jbRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRedoActionPerformed
        redo();
    }//GEN-LAST:event_jbRedoActionPerformed

    private void jtpProjectsStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jtpProjectsStateChanged
        tabbedPaneStateChanged();
    }//GEN-LAST:event_jtpProjectsStateChanged

    private void jmiExportPNGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiExportPNGActionPerformed
        exportImage(JVFileChooser.EXTENSION_PNG);
    }//GEN-LAST:event_jmiExportPNGActionPerformed

    private void jmiExportJPGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jmiExportJPGActionPerformed
        exportVaucansonG();
    }//GEN-LAST:event_jmiExportJPGActionPerformed

    private void jbZoomOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbZoomOutActionPerformed
        zoomOut();
    }//GEN-LAST:event_jbZoomOutActionPerformed

    private void jbZoomInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbZoomInActionPerformed
        zoomIn();
    }//GEN-LAST:event_jbZoomInActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        exportImage(JVFileChooser.EXTENSION_JPG);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /** Adiciona a barra de status */
    private void addStatusBar(JVStatusBar statusBar) {
        // Remove todos os componentes do painél
        jpStatus.removeAll();

        jpStatus.setLayout(new java.awt.BorderLayout());
        jpStatus.add(statusBar, java.awt.BorderLayout.SOUTH);
        // Repinta o painél para atualizar as modificações
        jpStatus.repaint();
    }

    private void configure(Style style) {
        // Define o ícone do programa
        setIconImage(getVaucangraphIcon());

        // Define a propriedade extendedState do Frame Vaucangraph de acordo com o style
        setExtendedState(style.getExtendedState());
        // Define a dimensão do Frame Vaucangraph de acordo com o style
        setSize(style.getSize());

        int x = (int) style.getPosition().getX();
        int y = (int) style.getPosition().getY();

        int width = (int) style.getSize().getWidth();
        int height = (int) style.getSize().getHeight();

        int screenWidth = (int) Toolkit.getDefaultToolkit().getScreenSize().getWidth();
        int screenHeight = (int) Toolkit.getDefaultToolkit().getScreenSize().getHeight();

        if (width > screenWidth) {
            width = screenWidth;
        }
        if (height > screenHeight) {
            height = screenHeight;
        }

        if (x < 0) {
            x = 0;
        }
        if (x > (screenWidth - style.getSize().getWidth())) {
            x = (int) (screenWidth - style.getSize().getWidth());
        }
        if (y < 0) {
            y = 0;
        }
        if (y > (screenHeight - style.getSize().getHeight())) {
            y = (int) (screenHeight - style.getSize().getHeight());
        }

        // Define as bordas (posição e dimensão) do Frame Vaucangraph
        setBounds(x, y, (int) style.getSize().getWidth(), (int) style.getSize().getHeight());
        setEnableProjectComponents(false);
    }

    private java.awt.Image getVaucangraphIcon() {
        return java.awt.Toolkit.getDefaultToolkit().getImage(
                this.getClass().getResource(
                "/vaucangraph/icons/vaucangraph.png"));
    }

    private void addWindowListener() {
        addWindowListener(new java.awt.event.WindowAdapter() {

            @Override
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exit();
            }
        });
    }

    private void exit() {
        try {
            // Se a janela estiver maximizada...
            if (getExtendedState() == javax.swing.JFrame.MAXIMIZED_BOTH) {
                style.setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
            } // Caso a janela NÃO esteja maximizada ao fechar...
            else {
                style.setExtendedState(0);
                style.setSize(getSize());
                style.getPosition().setLocation(getLocationOnScreen());
            }
            // Salva as propriedades no arquivo de configuração
            FileUtils.saveFile(style, FileUtils.getStyleFile());

        } finally {
            System.exit(0);
        }
    }

    /** Chama a janela de novo projeto */
    private void newProject() {
        new NewProject(this, true).setVisible(true);
    }

    /**
     * Método que adiciona um novo painél de projeto
     */
    public void addNewProject(Project project) {

        ProjectPanel projectPanel = new ProjectPanel(this, project);

        jtpProjects.addTab(project.getName(), projectPanel);
        projects.add(projectPanel);

        // Remove a página inicial se existir
        if (jtpProjects.getComponentAt(0) instanceof ProjectPanel == false) {
            jtpProjects.remove(0);
        }

        // Seleciona a aba do último projeto
        jtpProjects.setSelectedIndex(jtpProjects.getTabCount() - 1);
    }

    private void open() {
        // Cria um JFileChooser do tipo: "abrir"
        JVFileChooser fc = new JVFileChooser(JVFileChooser.OPEN_DIALOG, JVFileChooser.EXTENSION_VCG);
        int option = fc.showDialog(this, "Abrir projeto");

        // Abrindo projeto...
        if (option == JVFileChooser.APPROVE_OPTION) {
            // Lê o arquivo
            Project project = (Project) FileUtils.openFile(
                    fc.getSelectedFile());

            // Atualiza o local do projeto
            project.setLocal(fc.getSelectedFile().getPath());
            addNewProject(project);
        }
    }

    /**
     * Salva o projeto atual
     */
    private void save() {

        if (projects != null && projects.size() > 0) {

            Project project = projects.get(jtpProjects.getSelectedIndex()).getProject();

            if (project.getLocal() == null) {

                JVFileChooser fc = new JVFileChooser(JVFileChooser.SAVE_DIALOG, JVFileChooser.EXTENSION_VCG);

                File file = new File(fc.getCurrentDirectory() + File.separator + project.getName());
                fc.setSelectedFile(file);

                int option = fc.showDialog(this, "Salvar projeto");

                // Salvando projeto...
                if (option == JVFileChooser.APPROVE_OPTION) {
                    project.setLocal(fc.getCurrentDirectory() + File.separator
                            + FileUtils.addExtension(fc.getSelectedFile()));

                    // Salva o projeto em arquivo serializado
                    FileUtils.saveFile(project, project.getFile());

                    project.setSaved(true);
                    jbSave.setEnabled(!project.isSaved());
                }

            } else {
                // Salva o projeto serializado
                FileUtils.saveFile(project, project.getFile());
                project.setSaved(true);
                // Desabilita o botão salvar
                jbSave.setEnabled(!project.isSaved());
            }
        }
    }

    /**
     * Executa todas as ações necessárias para fechar um projeto
     */
    private void closeProject() {
        if (projects != null && projects.size() > 0) {

            if (!projects.get(jtpProjects.getSelectedIndex()).getProject().isSaved()) {

                Object[] options = {"Salvar", "Não Salvar", "Cancelar"};
                int option = JOptionPane.showOptionDialog(this,
                        "Deseja salvar as alterações em "
                        + jtpProjects.getTitleAt(jtpProjects.getSelectedIndex()) + "?", "Vaucangraph 2.0",
                        JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.YES_NO_CANCEL_OPTION,
                        null, options, options[0]);

                if (option == JOptionPane.YES_OPTION) {
                    save(); // salva o projeto
                    removeProject();
                } else if (option == JOptionPane.NO_OPTION) {
                    removeProject();
                }

            } else {
                removeProject();
            }
        }
    }

    /**
     * Remove a aba do projeto e o exclui do arraylist
     */
    private void removeProject() {
        projects.remove(jtpProjects.getSelectedIndex());
        jtpProjects.remove(jtpProjects.getSelectedIndex());
    }

    private void tabbedPaneStateChanged() {
        if (projects != null && projects.size() > 0) {

            jtInspector = projects.get(jtpProjects.getSelectedIndex()).
                    getCanvas().getInspector();
            jtProperties = projects.get(jtpProjects.getSelectedIndex()).
                    getCanvas().getPropertyTable();
            jsbStatus = projects.get(jtpProjects.getSelectedIndex()).
                    getCanvas().getStatusBar();

            addStatusBar(jsbStatus);
            setEnableProjectComponents(true);

        } // Sem projetos
        else {
            if (jtpProjects.getTabCount() == 0) {
                jtpProjects.addTab("Página inicial", getHomepage());
                setEnableProjectComponents(false);
            }
        }
    }

    private JPanel getHomepage() {
        JPanel homepage = new JPanel();
        homepage.setBackground(Color.gray);

        return homepage;
    }

    /**
     * Ativa ou desativa botões de ação em projetos
     * @param bln
     */
    private void setEnableProjectComponents(boolean bln) {

        jmiClose.setEnabled(bln);
        jmExport.setEnabled(bln);
        jmiSave.setEnabled(bln);
        jmiSaveAs.setEnabled(bln);
        jmiSaveAll.setEnabled(bln);
        jmiCut.setEnabled(bln);
        jmiCopy.setEnabled(bln);
        jmiPaste.setEnabled(bln);
        jmiDelete.setEnabled(bln);
        jmiFindCell.setEnabled(bln);
        jcbmiGridVisible.setEnabled(bln);
        jcbmiGridEnable.setEnabled(bln);
        jmGridModel.setEnabled(bln);
        jmiGridSize.setEnabled(bln);
        jbSave.setEnabled(bln);
        jbZoomOut.setEnabled(bln);
        jbZoomIn.setEnabled(bln);

        if (!bln) {
            jmiUndo.setEnabled(bln);
            jmiRedo.setEnabled(bln);
            jbUndo.setEnabled(bln);
            jbRedo.setEnabled(bln);
            jtInspector = new JVInspector(null);
            jsbStatus = new JVStatusBar(null);
        }

        jspInspector.setViewportView(jtInspector);
        jtInspector.setVisible(bln);
        jspProperties.setViewportView(jtProperties);
        jtProperties.setVisible(bln);
    }

    private void setGridVisible(boolean bln) {
        if (projects != null && projects.size() > 0) {
            projects.get(jtpProjects.getSelectedIndex()).
                    getCanvas().setGridVisible(bln);
        }
    }

    private void setGridEnable(boolean bln) {
        if (projects != null && projects.size() > 0) {
            projects.get(jtpProjects.getSelectedIndex()).
                    getCanvas().setGridEnabled(bln);
        }
    }

    private void setGridModel() {
        if (projects != null && projects.size() > 0) {
            if (jrbmiPoints.isSelected()) {
                projects.get(jtpProjects.getSelectedIndex()).
                        getCanvas().setGridMode(0);
            } else if (jrbmiLines.isSelected()) {
                projects.get(jtpProjects.getSelectedIndex()).
                        getCanvas().setGridMode(2);
            }
            projects.get(jtpProjects.getSelectedIndex()).
                    getCanvas().refresh();
        }
    }

    public void exportImage(String imageFormat) {

        Color background = null;

        if (imageFormat.equals(JVFileChooser.EXTENSION_JPG)) {
            background = Color.white;
        }

        if (projects != null && projects.size() > 0) {
            Canvas canvas = projects.get(jtpProjects.getSelectedIndex()).getCanvas();
            BufferedImage bufferedImage = canvas.getImage(background, BufferedImage.TYPE_INT_RGB);
            bufferedImage.createGraphics();

            JVFileChooser fc = new JVFileChooser(JVFileChooser.SAVE_DIALOG, imageFormat);

            fc.setSelectedFile(new File(fc.getCurrentDirectory()
                    + File.separator + canvas.getProject().getName()));

            int option = fc.showDialog(this, "Salvar projeto");

            if (option == JFileChooser.APPROVE_OPTION) {
                try {
                    ImageIO.write(bufferedImage, imageFormat.toUpperCase(), fc.getSelectedFile());
                } catch (IOException ex) {
                    Logger.getLogger(Vaucangraph.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    public void exportVaucansonG() {
        if (projects != null && projects.size() > 0) {

            Canvas canvas = projects.get(jtpProjects.getSelectedIndex()).getCanvas();
            JVFileChooser fc = new JVFileChooser(JVFileChooser.SAVE_DIALOG, JVFileChooser.EXTENSION_TXT);

            fc.setSelectedFile(new File(fc.getCurrentDirectory() + File.separator
                    + canvas.getProject().getName()));

            int option = fc.showDialog(this, "Salvar projeto");

            if (option == JFileChooser.APPROVE_OPTION) {
                FileUtils.writeInFile(fc.getSelectedFile(),
                        canvas.getProjectPanel().getJepCode().getText());
            }
        }
    }

    private void undo() {
        if (projects != null && projects.size() > 0) {
            Canvas canvas = projects.get(jtpProjects.getSelectedIndex()).getCanvas();
            canvas.undo();
        }
    }

    private void redo() {
        if (projects != null && projects.size() > 0) {
            Canvas canvas = projects.get(jtpProjects.getSelectedIndex()).getCanvas();
            canvas.redo();
        }
    }

    private void cut(ActionEvent evt) {
        if (projects != null && projects.size() > 0) {
            Canvas canvas = projects.get(jtpProjects.getSelectedIndex()).getCanvas();
            canvas.cut(evt);
        }
    }

    private void copy(ActionEvent evt) {
        if (projects != null && projects.size() > 0) {
            Canvas canvas = projects.get(jtpProjects.getSelectedIndex()).getCanvas();
            canvas.copy(evt);
        }
    }

    private void paste(ActionEvent evt) {
        if (projects != null && projects.size() > 0) {
            Canvas canvas = projects.get(jtpProjects.getSelectedIndex()).getCanvas();
            canvas.paste(evt);
        }
    }

    private void zoomOut() {
        if (projects != null && projects.size() > 0) {
            ProjectPanel panel = projects.get(jtpProjects.getSelectedIndex());
            Canvas canvas = panel.getCanvas();

            canvas.setScale(canvas.getScale() - 0.1);

            int w = (int) (canvas.getProject().getSize().getWidth() * canvas.getScale());
            int h = (int) (canvas.getProject().getSize().getHeight() * canvas.getScale());

            Dimension d = new Dimension(w, h);
            canvas.setSize(d);
        }
    }

    private void zoomIn() {
        if (projects != null && projects.size() > 0) {
            ProjectPanel panel = projects.get(jtpProjects.getSelectedIndex());
            Canvas canvas = panel.getCanvas();

            canvas.setScale(canvas.getScale() + 0.1);

            int w = (int) (canvas.getProject().getSize().getWidth() * canvas.getScale());
            int h = (int) (canvas.getProject().getSize().getHeight() * canvas.getScale());

            Dimension d = new Dimension(w, h);
            canvas.setSize(d);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new Vaucangraph(new Style()).setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup gridTypeGroup;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JButton jbNewProject;
    private javax.swing.JButton jbOpen;
    private javax.swing.JButton jbRedo;
    private javax.swing.JButton jbSave;
    private javax.swing.JButton jbUndo;
    private javax.swing.JButton jbZoomIn;
    private javax.swing.JButton jbZoomOut;
    private javax.swing.JCheckBoxMenuItem jcbmiGridEnable;
    private javax.swing.JCheckBoxMenuItem jcbmiGridVisible;
    private javax.swing.JMenu jmEdit;
    private javax.swing.JMenu jmExport;
    private javax.swing.JMenu jmFile;
    private javax.swing.JMenu jmGridModel;
    private javax.swing.JMenu jmHelp;
    private javax.swing.JMenu jmView;
    private javax.swing.JMenuBar jmbMenu;
    private javax.swing.JMenuItem jmiAbout;
    private javax.swing.JMenuItem jmiClose;
    private javax.swing.JMenuItem jmiCopy;
    private javax.swing.JMenuItem jmiCut;
    private javax.swing.JMenuItem jmiDelete;
    private javax.swing.JMenuItem jmiExit;
    private javax.swing.JMenuItem jmiExportJPG;
    private javax.swing.JMenuItem jmiExportPNG;
    private javax.swing.JMenuItem jmiFindCell;
    private javax.swing.JMenuItem jmiGridSize;
    private javax.swing.JMenuItem jmiHelp;
    private javax.swing.JMenuItem jmiNewProject;
    private javax.swing.JMenuItem jmiOpen;
    private javax.swing.JMenuItem jmiPaste;
    private javax.swing.JMenuItem jmiRedo;
    private javax.swing.JMenuItem jmiSave;
    private javax.swing.JMenuItem jmiSaveAll;
    private javax.swing.JMenuItem jmiSaveAs;
    private javax.swing.JMenuItem jmiUndo;
    private javax.swing.JPanel jpBackground;
    private javax.swing.JPanel jpComponents;
    private javax.swing.JPanel jpHomepage;
    private javax.swing.JPanel jpProject;
    private javax.swing.JPanel jpStatus;
    private javax.swing.JRadioButtonMenuItem jrbmiLines;
    private javax.swing.JRadioButtonMenuItem jrbmiPoints;
    private javax.swing.JPopupMenu.Separator jsSeparator1;
    private javax.swing.JToolBar.Separator jsSeparator10;
    private javax.swing.JPopupMenu.Separator jsSeparator11;
    private javax.swing.JPopupMenu.Separator jsSeparator2;
    private javax.swing.JPopupMenu.Separator jsSeparator3;
    private javax.swing.JPopupMenu.Separator jsSeparator4;
    private javax.swing.JPopupMenu.Separator jsSeparator5;
    private javax.swing.JPopupMenu.Separator jsSeparator6;
    private javax.swing.JPopupMenu.Separator jsSeparator7;
    private javax.swing.JPopupMenu.Separator jsSeparator8;
    private javax.swing.JToolBar.Separator jsSeparator9;
    private javax.swing.JScrollPane jspInspector;
    private javax.swing.JScrollPane jspProperties;
    private javax.swing.JTree jtInspector;
    private javax.swing.JTable jtProperties;
    private javax.swing.JToolBar jtbMenu;
    private javax.swing.JTabbedPane jtpProjects;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the jbNewProject
     */
    public javax.swing.JButton getJbNewProject() {
        return jbNewProject;
    }

    /**
     * @return the jbOpen
     */
    public javax.swing.JButton getJbOpen() {
        return jbOpen;
    }

    /**
     * @return the jbRedo
     */
    public javax.swing.JButton getJbRedo() {
        return jbRedo;
    }

    /**
     * @return the jbSave
     */
    public javax.swing.JButton getJbSave() {
        return jbSave;
    }

    /**
     * @return the jbUndo
     */
    public javax.swing.JButton getJbUndo() {
        return jbUndo;
    }

    /**
     * @return the jbZoomOut
     */
    public javax.swing.JButton getJbZoomOut() {
        return jbZoomOut;
    }

    /**
     * @return the jbZoomIn
     */
    public javax.swing.JButton getJbZoomIn() {
        return jbZoomIn;
    }

    /**
     * @return the jcbmiGridEnable
     */
    public javax.swing.JCheckBoxMenuItem getJcbmiGridEnable() {
        return jcbmiGridEnable;
    }

    /**
     * @return the jcbmiGridVisible
     */
    public javax.swing.JCheckBoxMenuItem getJcbmiGridVisible() {
        return jcbmiGridVisible;
    }

    /**
     * @return the jmEdit
     */
    public javax.swing.JMenu getJmEdit() {
        return jmEdit;
    }

    /**
     * @return the jmFile
     */
    public javax.swing.JMenu getJmFile() {
        return jmFile;
    }

    /**
     * @return the jmGridModel
     */
    public javax.swing.JMenu getJmGridModel() {
        return jmGridModel;
    }

    /**
     * @return the jmHelp
     */
    public javax.swing.JMenu getJmHelp() {
        return jmHelp;
    }

    /**
     * @return the jmView
     */
    public javax.swing.JMenu getJmView() {
        return jmView;
    }

    /**
     * @return the jmbMenu
     */
    public javax.swing.JMenuBar getJmbMenu() {
        return jmbMenu;
    }

    /**
     * @return the jmiAbout
     */
    public javax.swing.JMenuItem getJmiAbout() {
        return jmiAbout;
    }

    /**
     * @return the jmiClose
     */
    public javax.swing.JMenuItem getJmiClose() {
        return jmiClose;
    }

    /**
     * @return the jmiCopy
     */
    public javax.swing.JMenuItem getJmiCopy() {
        return jmiCopy;
    }

    /**
     * @return the jmiCut
     */
    public javax.swing.JMenuItem getJmiCut() {
        return jmiCut;
    }

    /**
     * @return the jmiDelete
     */
    public javax.swing.JMenuItem getJmiDelete() {
        return jmiDelete;
    }

    /**
     * @return the jmiExit
     */
    public javax.swing.JMenuItem getJmiExit() {
        return jmiExit;
    }

    /**
     * @return the jmiFindCell
     */
    public javax.swing.JMenuItem getJmiFindCell() {
        return jmiFindCell;
    }

    /**
     * @return the jmiGridSize
     */
    public javax.swing.JMenuItem getJmiGridSize() {
        return jmiGridSize;
    }

    /**
     * @return the jmiHelp
     */
    public javax.swing.JMenuItem getJmiHelp() {
        return jmiHelp;
    }

    /**
     * @return the jmiNewProject
     */
    public javax.swing.JMenuItem getJmiNewProject() {
        return jmiNewProject;
    }

    /**
     * @return the jmiOpen
     */
    public javax.swing.JMenuItem getJmiOpen() {
        return jmiOpen;
    }

    /**
     * @return the jmiPaste
     */
    public javax.swing.JMenuItem getJmiPaste() {
        return jmiPaste;
    }

    /**
     * @return the jmiRedo
     */
    public javax.swing.JMenuItem getJmiRedo() {
        return jmiRedo;
    }

    /**
     * @return the jmiSave
     */
    public javax.swing.JMenuItem getJmiSave() {
        return jmiSave;
    }

    /**
     * @return the jmiSaveAll
     */
    public javax.swing.JMenuItem getJmiSaveAll() {
        return jmiSaveAll;
    }

    /**
     * @return the jmiSaveAs
     */
    public javax.swing.JMenuItem getJmiSaveAs() {
        return jmiSaveAs;
    }

    /**
     * @return the jmiUndo
     */
    public javax.swing.JMenuItem getJmiUndo() {
        return jmiUndo;
    }

    /**
     * @return the jpBackground
     */
    public javax.swing.JPanel getJpBackground() {
        return jpBackground;
    }

    /**
     * @return the jpComponents
     */
    public javax.swing.JPanel getJpComponents() {
        return jpComponents;
    }

    /**
     * @return the jpHomepage
     */
    public javax.swing.JPanel getJpHomepage() {
        return jpHomepage;
    }

    /**
     * @return the jpProject
     */
    public javax.swing.JPanel getJpProject() {
        return jpProject;
    }

    /**
     * @return the jpStatus
     */
    public javax.swing.JPanel getJpStatus() {
        return jpStatus;
    }

    /**
     * @return the jrbmiPoints
     */
    public javax.swing.JRadioButtonMenuItem getJrbmiPoints() {
        return jrbmiPoints;
    }

    /**
     * @return the jrbmiLines
     */
    public javax.swing.JRadioButtonMenuItem getJrbmiLines() {
        return jrbmiLines;
    }

    /**
     * @return the jsSeparator1
     */
    public javax.swing.JPopupMenu.Separator getJsSeparator1() {
        return jsSeparator1;
    }

    /**
     * @return the jsSeparator2
     */
    public javax.swing.JPopupMenu.Separator getJsSeparator2() {
        return jsSeparator2;
    }

    /**
     * @return the jsSeparator3
     */
    public javax.swing.JPopupMenu.Separator getJsSeparator3() {
        return jsSeparator4;
    }

    /**
     * @return the jsSeparator4
     */
    public javax.swing.JPopupMenu.Separator getJsSeparator4() {
        return jsSeparator5;
    }

    /**
     * @return the jsSeparator5
     */
    public javax.swing.JPopupMenu.Separator getJsSeparator5() {
        return jsSeparator6;
    }

    /**
     * @return the jsSeparator6
     */
    public javax.swing.JPopupMenu.Separator getJsSeparator6() {
        return jsSeparator7;
    }

    /**
     * @return the jsSeparator7
     */
    public javax.swing.JToolBar.Separator getJsSeparator7() {
        return jsSeparator9;
    }

    /**
     * @return the jspInspector
     */
    public javax.swing.JScrollPane getJspInspector() {
        return jspInspector;
    }

    /**
     * @return the jspProperties
     */
    public javax.swing.JScrollPane getJspProperties() {
        return jspProperties;
    }

    /**
     * @return the jtbMenu
     */
    public javax.swing.JToolBar getJtbMenu() {
        return jtbMenu;
    }

    /**
     * @return the jtpProjects
     */
    public javax.swing.JTabbedPane getJtpProjects() {
        return jtpProjects;
    }

    /**
     * @return the projects
     */
    public ArrayList<ProjectPanel> getProjects() {
        return projects;
    }
}
